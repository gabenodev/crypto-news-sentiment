{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\WhaleTransactions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhaleTransactions = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [period, setPeriod] = useState(7); // 7 zile\n  const [selectedBlockchain, setSelectedBlockchain] = useState(\"ethereum\");\n  useEffect(() => {\n    // Funcția pentru a obține tranzacțiile mari\n    const fetchTransactions = async () => {\n      try {\n        const apiKey = \"RP1AAGBP2YNUWFTAFP6KWT7GRRKC5BG5MM\"; // Înlocuiește cu cheia ta de API de la Etherscan\n        const endpoint = `https://api.etherscan.io/api`;\n\n        // Apel API pentru a obține tranzacțiile\n        const response = await axios.get(endpoint, {\n          params: {\n            module: \"account\",\n            action: \"txlist\",\n            address: \"0x5f7b6fa1c33f77b4e8f7781c7c95160270d3e4f4\",\n            // Adresa care dorești să o monitorizezi\n            startblock: 0,\n            endblock: 99999999,\n            sort: \"desc\",\n            apikey: apiKey\n          }\n        });\n\n        // Log pentru a inspecta răspunsul complet\n        console.log(\"API Response:\", response.data);\n\n        // Verificăm dacă răspunsul conține tranzacții\n        if (response.data.result && response.data.result.length > 0) {\n          // Filtrăm tranzacțiile mari, mai mari de 100,000 USD (în ETH)\n          const largeTransactions = response.data.result.filter(transaction => {\n            const amountInEth = parseFloat(transaction.value) / Math.pow(10, 18); // Convertim valoarea în ETH\n            return amountInEth > 100; // Tranzacții mai mari de 100 ETH\n          });\n          setTransactions(largeTransactions);\n        } else {\n          console.log(\"Nu au fost găsite tranzacții pentru adresa specificată.\");\n        }\n      } catch (error) {\n        console.error(\"Eroare la obținerea tranzacțiilor:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTransactions();\n  }, [period, selectedBlockchain]); // Refacerea cererii când se schimbă perioada sau blockchain-ul\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading transactions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Whale Transactions (Over 100 ETH)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"blockchain\",\n        children: \"Select Blockchain:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"blockchain\",\n        value: selectedBlockchain,\n        onChange: e => setSelectedBlockchain(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ethereum\",\n          children: \"Ethereum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"binancecoin\",\n          children: \"Binance Coin (BSC)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"bitcoin\",\n          children: \"Bitcoin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"period\",\n        children: \"Select Period (Days):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"period\",\n        type: \"number\",\n        value: period,\n        onChange: e => setPeriod(e.target.value),\n        min: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Timestamp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount (ETH)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Blockchain\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"3\",\n            children: \"No large transactions found.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this) : transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: new Date(transaction.timeStamp * 1000).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [parseFloat(transaction.value) / Math.pow(10, 18), \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: selectedBlockchain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(WhaleTransactions, \"NFJ2pEUC0B0C071jBiqQ7eMnR14=\");\n_c = WhaleTransactions;\nexport default WhaleTransactions;\nvar _c;\n$RefreshReg$(_c, \"WhaleTransactions\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","WhaleTransactions","_s","transactions","setTransactions","loading","setLoading","period","setPeriod","selectedBlockchain","setSelectedBlockchain","fetchTransactions","apiKey","endpoint","response","get","params","module","action","address","startblock","endblock","sort","apikey","console","log","data","result","length","largeTransactions","filter","transaction","amountInEth","parseFloat","value","Math","pow","error","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","e","target","type","min","colSpan","map","index","Date","timeStamp","toLocaleString","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/WhaleTransactions.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst WhaleTransactions = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [period, setPeriod] = useState(7); // 7 zile\r\n  const [selectedBlockchain, setSelectedBlockchain] = useState(\"ethereum\");\r\n\r\n  useEffect(() => {\r\n    // Funcția pentru a obține tranzacțiile mari\r\n    const fetchTransactions = async () => {\r\n      try {\r\n        const apiKey = \"RP1AAGBP2YNUWFTAFP6KWT7GRRKC5BG5MM\"; // Înlocuiește cu cheia ta de API de la Etherscan\r\n        const endpoint = `https://api.etherscan.io/api`;\r\n\r\n        // Apel API pentru a obține tranzacțiile\r\n        const response = await axios.get(endpoint, {\r\n          params: {\r\n            module: \"account\",\r\n            action: \"txlist\",\r\n            address: \"0x5f7b6fa1c33f77b4e8f7781c7c95160270d3e4f4\", // Adresa care dorești să o monitorizezi\r\n            startblock: 0,\r\n            endblock: 99999999,\r\n            sort: \"desc\",\r\n            apikey: apiKey,\r\n          },\r\n        });\r\n\r\n        // Log pentru a inspecta răspunsul complet\r\n        console.log(\"API Response:\", response.data);\r\n\r\n        // Verificăm dacă răspunsul conține tranzacții\r\n        if (response.data.result && response.data.result.length > 0) {\r\n          // Filtrăm tranzacțiile mari, mai mari de 100,000 USD (în ETH)\r\n          const largeTransactions = response.data.result.filter(\r\n            (transaction) => {\r\n              const amountInEth =\r\n                parseFloat(transaction.value) / Math.pow(10, 18); // Convertim valoarea în ETH\r\n              return amountInEth > 100; // Tranzacții mai mari de 100 ETH\r\n            }\r\n          );\r\n\r\n          setTransactions(largeTransactions);\r\n        } else {\r\n          console.log(\r\n            \"Nu au fost găsite tranzacții pentru adresa specificată.\"\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Eroare la obținerea tranzacțiilor:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTransactions();\r\n  }, [period, selectedBlockchain]); // Refacerea cererii când se schimbă perioada sau blockchain-ul\r\n\r\n  if (loading) {\r\n    return <div>Loading transactions...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Whale Transactions (Over 100 ETH)</h2>\r\n\r\n      {/* Selectare blockchain */}\r\n      <div>\r\n        <label htmlFor=\"blockchain\">Select Blockchain:</label>\r\n        <select\r\n          id=\"blockchain\"\r\n          value={selectedBlockchain}\r\n          onChange={(e) => setSelectedBlockchain(e.target.value)}\r\n        >\r\n          <option value=\"ethereum\">Ethereum</option>\r\n          <option value=\"binancecoin\">Binance Coin (BSC)</option>\r\n          <option value=\"bitcoin\">Bitcoin</option>\r\n          {/* Adaugă opțiuni suplimentare pentru alte blockchain-uri */}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Selectare perioadă */}\r\n      <div>\r\n        <label htmlFor=\"period\">Select Period (Days):</label>\r\n        <input\r\n          id=\"period\"\r\n          type=\"number\"\r\n          value={period}\r\n          onChange={(e) => setPeriod(e.target.value)}\r\n          min=\"1\"\r\n        />\r\n      </div>\r\n\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Timestamp</th>\r\n            <th>Amount (ETH)</th>\r\n            <th>Blockchain</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {transactions.length === 0 ? (\r\n            <tr>\r\n              <td colSpan=\"3\">No large transactions found.</td>\r\n            </tr>\r\n          ) : (\r\n            transactions.map((transaction, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  {new Date(transaction.timeStamp * 1000).toLocaleString()}\r\n                </td>\r\n                <td>{parseFloat(transaction.value) / Math.pow(10, 18)} ETH</td>\r\n                <td>{selectedBlockchain}</td>\r\n              </tr>\r\n            ))\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhaleTransactions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}