{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\WhaleTransactions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhaleTransactions = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [period, setPeriod] = useState(7); // 7 zile\n  const [selectedBlockchain, setSelectedBlockchain] = useState(\"ethereum\");\n\n  // Folosim useMemo pentru a memoriza adresele de portofele\n  const walletAddresses = useMemo(() => [], []); // Nu mai sunt necesare adresele pentru că vom urmări toate tranzacțiile\n\n  useEffect(() => {\n    // Funcția pentru a obține tranzacțiile mari\n    const fetchTransactions = async () => {\n      try {\n        const apiKey = \"RP1AAGBP2YNUWFTAFP6KWT7GRRKC5BG5MM\"; // Înlocuiește cu cheia ta de API de la Etherscan\n        const endpoint = `https://api.etherscan.io/api`;\n\n        // Vom colecta tranzacțiile pentru ultimele blocuri\n        let allTransactions = [];\n        const startBlock = 0; // Poți seta blocul de start (de ex. un bloc recent)\n        const endBlock = \"latest\"; // Folosim \"latest\" pentru a lua cele mai recente tranzacții\n\n        const response = await axios.get(endpoint, {\n          params: {\n            module: \"logs\",\n            action: \"getLogs\",\n            fromBlock: startBlock,\n            toBlock: endBlock,\n            apikey: apiKey\n          }\n        });\n\n        // Log pentru a inspecta răspunsul complet\n        console.log(\"API Response:\", response.data);\n\n        // Verificăm dacă răspunsul conține tranzacții\n        if (response.data.result && Array.isArray(response.data.result)) {\n          const largeTransactions = response.data.result.filter(transaction => {\n            const amountInEth = parseFloat(transaction.data) / Math.pow(10, 18); // Convertim valoarea în ETH\n            return amountInEth > 10; // Tranzacții mai mari de 10 ETH\n          });\n          allTransactions = [...allTransactions, ...largeTransactions];\n        } else {\n          console.log(\"No valid transactions found or invalid format\");\n        }\n        setTransactions(allTransactions);\n      } catch (error) {\n        console.error(\"Eroare la obținerea tranzacțiilor:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTransactions();\n  }, [period, selectedBlockchain]); // Refacerea cererii când se schimbă perioada sau blockchain-ul\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading transactions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Whale Transactions (Over 10 ETH)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"blockchain\",\n        children: \"Select Blockchain:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"blockchain\",\n        value: selectedBlockchain,\n        onChange: e => setSelectedBlockchain(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ethereum\",\n          children: \"Ethereum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"binancecoin\",\n          children: \"Binance Coin (BSC)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"bitcoin\",\n          children: \"Bitcoin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"period\",\n        children: \"Select Period (Days):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"period\",\n        type: \"number\",\n        value: period,\n        onChange: e => setPeriod(e.target.value),\n        min: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Timestamp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount (ETH)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Blockchain\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"3\",\n            children: \"No large transactions found.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this) : transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: new Date(transaction.timeStamp * 1000).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [parseFloat(transaction.data) / Math.pow(10, 18), \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: selectedBlockchain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(WhaleTransactions, \"E+nZuSbQVrvD8fLvOfjNJmFPQ1g=\");\n_c = WhaleTransactions;\nexport default WhaleTransactions;\nvar _c;\n$RefreshReg$(_c, \"WhaleTransactions\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","jsxDEV","_jsxDEV","WhaleTransactions","_s","transactions","setTransactions","loading","setLoading","period","setPeriod","selectedBlockchain","setSelectedBlockchain","walletAddresses","fetchTransactions","apiKey","endpoint","allTransactions","startBlock","endBlock","response","get","params","module","action","fromBlock","toBlock","apikey","console","log","data","result","Array","isArray","largeTransactions","filter","transaction","amountInEth","parseFloat","Math","pow","error","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","target","type","min","length","colSpan","map","index","Date","timeStamp","toLocaleString","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/WhaleTransactions.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst WhaleTransactions = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [period, setPeriod] = useState(7); // 7 zile\r\n  const [selectedBlockchain, setSelectedBlockchain] = useState(\"ethereum\");\r\n\r\n  // Folosim useMemo pentru a memoriza adresele de portofele\r\n  const walletAddresses = useMemo(() => [], []); // Nu mai sunt necesare adresele pentru că vom urmări toate tranzacțiile\r\n\r\n  useEffect(() => {\r\n    // Funcția pentru a obține tranzacțiile mari\r\n    const fetchTransactions = async () => {\r\n      try {\r\n        const apiKey = \"RP1AAGBP2YNUWFTAFP6KWT7GRRKC5BG5MM\"; // Înlocuiește cu cheia ta de API de la Etherscan\r\n        const endpoint = `https://api.etherscan.io/api`;\r\n\r\n        // Vom colecta tranzacțiile pentru ultimele blocuri\r\n        let allTransactions = [];\r\n\r\n        const startBlock = 0; // Poți seta blocul de start (de ex. un bloc recent)\r\n        const endBlock = \"latest\"; // Folosim \"latest\" pentru a lua cele mai recente tranzacții\r\n\r\n        const response = await axios.get(endpoint, {\r\n          params: {\r\n            module: \"logs\",\r\n            action: \"getLogs\",\r\n            fromBlock: startBlock,\r\n            toBlock: endBlock,\r\n            apikey: apiKey,\r\n          },\r\n        });\r\n\r\n        // Log pentru a inspecta răspunsul complet\r\n        console.log(\"API Response:\", response.data);\r\n\r\n        // Verificăm dacă răspunsul conține tranzacții\r\n        if (response.data.result && Array.isArray(response.data.result)) {\r\n          const largeTransactions = response.data.result.filter(\r\n            (transaction) => {\r\n              const amountInEth =\r\n                parseFloat(transaction.data) / Math.pow(10, 18); // Convertim valoarea în ETH\r\n              return amountInEth > 10; // Tranzacții mai mari de 10 ETH\r\n            }\r\n          );\r\n\r\n          allTransactions = [...allTransactions, ...largeTransactions];\r\n        } else {\r\n          console.log(\"No valid transactions found or invalid format\");\r\n        }\r\n\r\n        setTransactions(allTransactions);\r\n      } catch (error) {\r\n        console.error(\"Eroare la obținerea tranzacțiilor:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTransactions();\r\n  }, [period, selectedBlockchain]); // Refacerea cererii când se schimbă perioada sau blockchain-ul\r\n\r\n  if (loading) {\r\n    return <div>Loading transactions...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Whale Transactions (Over 10 ETH)</h2>\r\n\r\n      {/* Selectare blockchain */}\r\n      <div>\r\n        <label htmlFor=\"blockchain\">Select Blockchain:</label>\r\n        <select\r\n          id=\"blockchain\"\r\n          value={selectedBlockchain}\r\n          onChange={(e) => setSelectedBlockchain(e.target.value)}\r\n        >\r\n          <option value=\"ethereum\">Ethereum</option>\r\n          <option value=\"binancecoin\">Binance Coin (BSC)</option>\r\n          <option value=\"bitcoin\">Bitcoin</option>\r\n          {/* Adaugă opțiuni suplimentare pentru alte blockchain-uri */}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Selectare perioadă */}\r\n      <div>\r\n        <label htmlFor=\"period\">Select Period (Days):</label>\r\n        <input\r\n          id=\"period\"\r\n          type=\"number\"\r\n          value={period}\r\n          onChange={(e) => setPeriod(e.target.value)}\r\n          min=\"1\"\r\n        />\r\n      </div>\r\n\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Timestamp</th>\r\n            <th>Amount (ETH)</th>\r\n            <th>Blockchain</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {transactions.length === 0 ? (\r\n            <tr>\r\n              <td colSpan=\"3\">No large transactions found.</td>\r\n            </tr>\r\n          ) : (\r\n            transactions.map((transaction, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  {new Date(transaction.timeStamp * 1000).toLocaleString()}\r\n                </td>\r\n                <td>{parseFloat(transaction.data) / Math.pow(10, 18)} ETH</td>\r\n                <td>{selectedBlockchain}</td>\r\n              </tr>\r\n            ))\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhaleTransactions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}