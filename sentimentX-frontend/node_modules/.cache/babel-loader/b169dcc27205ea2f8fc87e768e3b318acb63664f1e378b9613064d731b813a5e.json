{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\WhaleTransactions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhaleTransactions = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchWhaleTransactions = async () => {\n      const API_KEY = \"API_TĂU_KEY\"; // Înlocuiește cu API-ul tău Etherscan\n      // Înlocuiește cu o adresă activă care are tranzacții mari\n      const address = \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"; // Un exemplu de adresă activă pe Ethereum\n      const url = `https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${API_KEY}`;\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data); // Verifică răspunsul API-ului\n        if (data.status === \"1\") {\n          // Filtrăm tranzacțiile care au mai mult de 1 ETH\n          const filteredTransactions = data.result.filter(tx => parseFloat(tx.value) > 10 ** 18); // > 1 ETH\n          setTransactions(filteredTransactions);\n        } else {\n          console.error(\"Nu s-au găsit tranzacții\");\n        }\n      } catch (error) {\n        console.error(\"Eroare la obținerea tranzacțiilor:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchWhaleTransactions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Whale Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\xCEnc\\u0103rc\\u0103m tranzac\\u021Biile...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.length > 0 ? transactions.map(tx => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [tx.from, \" a transferat \", tx.value / 10 ** 18, \" ETH c\\u0103tre \", tx.to]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this)\n      }, tx.hash, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nu sunt tranzac\\u021Bii mari disponibile \\xEEn acest moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(WhaleTransactions, \"DUmkRmOc9OB7ZZSQstrrGiz1MwE=\");\n_c = WhaleTransactions;\nexport default WhaleTransactions;\nvar _c;\n$RefreshReg$(_c, \"WhaleTransactions\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WhaleTransactions","_s","transactions","setTransactions","loading","setLoading","fetchWhaleTransactions","API_KEY","address","url","response","fetch","data","json","console","log","status","filteredTransactions","result","filter","tx","parseFloat","value","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","from","to","hash","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/WhaleTransactions.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst WhaleTransactions = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchWhaleTransactions = async () => {\r\n      const API_KEY = \"API_TĂU_KEY\"; // Înlocuiește cu API-ul tău Etherscan\r\n      // Înlocuiește cu o adresă activă care are tranzacții mari\r\n      const address = \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"; // Un exemplu de adresă activă pe Ethereum\r\n      const url = `https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${API_KEY}`;\r\n\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        console.log(data); // Verifică răspunsul API-ului\r\n        if (data.status === \"1\") {\r\n          // Filtrăm tranzacțiile care au mai mult de 1 ETH\r\n          const filteredTransactions = data.result.filter(\r\n            (tx) => parseFloat(tx.value) > 10 ** 18\r\n          ); // > 1 ETH\r\n          setTransactions(filteredTransactions);\r\n        } else {\r\n          console.error(\"Nu s-au găsit tranzacții\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Eroare la obținerea tranzacțiilor:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchWhaleTransactions();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Whale Transactions</h2>\r\n      {loading ? (\r\n        <p>Încărcăm tranzacțiile...</p>\r\n      ) : (\r\n        <ul>\r\n          {transactions.length > 0 ? (\r\n            transactions.map((tx) => (\r\n              <li key={tx.hash}>\r\n                <p>\r\n                  {tx.from} a transferat {tx.value / 10 ** 18} ETH către {tx.to}\r\n                </p>\r\n              </li>\r\n            ))\r\n          ) : (\r\n            <p>Nu sunt tranzacții mari disponibile în acest moment.</p>\r\n          )}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhaleTransactions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}