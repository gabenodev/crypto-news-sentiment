{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\WhaleTransactions.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { FaEthereum, FaBitcoin } from \"react-icons/fa\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst whaleWallets = {\n  \"0x8894E0a0c962CB723c1976a4421c95949bE2D4E3\": \"Binance\",\n  \"0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8\": \"Binance 2\",\n  \"0x5a52E96BAcdaBb82fd05763E25335261B270Efcb\": \"Binance 3\"\n};\nconst WhaleTransactions = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const offset = 20;\n  const fetchWhaleTransactions = async page => {\n    const API_KEY_BSC = \"P51M4PQJ9KBGFGNXJFUETUJ2HSNJ98Y26T\"; // Înlocuiește cu cheia ta\n\n    const wallets = [{\n      name: \"Binance BSC\",\n      address: \"0x8894E0a0c962CB723c1976a4421c95949bE2D4E3\",\n      blockchain: \"BSC\",\n      apiKey: API_KEY_BSC\n    }];\n    const allTransactions = [];\n    for (let wallet of wallets) {\n      const {\n        address,\n        blockchain,\n        apiKey,\n        name\n      } = wallet;\n      const url = `https://api.bscscan.com/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=${page}&offset=${offset}&sort=desc&apikey=${apiKey}`;\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(\"API Response:\", data); // Verifică răspunsul API\n\n        if (data.status === \"1\" && data.result) {\n          const filteredTransactions = data.result; // Am scos filtrul temporar\n          console.log(\"Filtered Transactions:\", filteredTransactions);\n          const transactionsWithData = filteredTransactions.map(tx => {\n            let exchange = \"Unknown\";\n            if (whaleWallets[tx.from]) {\n              exchange = whaleWallets[tx.from];\n            } else if (whaleWallets[tx.to]) {\n              exchange = whaleWallets[tx.to];\n            } else {\n              exchange = truncate(tx.from);\n            }\n            return {\n              hash: tx.hash,\n              from: tx.from,\n              to: tx.to,\n              value: parseInt(tx.value, 16) / 10 ** 18,\n              blockchain: \"BSC\",\n              exchange,\n              date: new Date(tx.timeStamp * 1000).toLocaleString(),\n              fee: tx.gasUsed ? parseInt(tx.gasUsed, 16) * parseInt(tx.gasPrice, 16) / 10 ** 18 : \"N/A\",\n              block: tx.blockNumber,\n              age: formatDistanceToNow(new Date(tx.timeStamp * 1000)),\n              icon: /*#__PURE__*/_jsxDEV(FaBitcoin, {\n                className: \"text-yellow-400 text-xl\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 21\n              }, this)\n            };\n          });\n          allTransactions.push(...transactionsWithData);\n        } else {\n          console.error(`No transactions found for wallet: ${name}`);\n        }\n      } catch (error) {\n        console.error(\"Error fetching transactions:\", error);\n      }\n    }\n    console.log(\"All Transactions:\", allTransactions);\n    setTransactions(allTransactions);\n    setLoading(false);\n    console.log(loading); // Verifică starea loading\n  };\n  useEffect(() => {\n    fetchWhaleTransactions(page);\n  }, [page]);\n  const truncate = str => {\n    return str.length > 15 ? `${str.slice(0, 6)}...${str.slice(-4)}` : str;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-6\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(WhaleTransactions, \"t1fIOOFhMO1ndF3uEzs769oqwUk=\");\n_c = WhaleTransactions;\nexport default WhaleTransactions;\nvar _c;\n$RefreshReg$(_c, \"WhaleTransactions\");","map":{"version":3,"names":["useState","useEffect","FaEthereum","FaBitcoin","formatDistanceToNow","jsxDEV","_jsxDEV","whaleWallets","WhaleTransactions","_s","transactions","setTransactions","loading","setLoading","page","setPage","offset","fetchWhaleTransactions","API_KEY_BSC","wallets","name","address","blockchain","apiKey","allTransactions","wallet","url","response","fetch","data","json","console","log","status","result","filteredTransactions","transactionsWithData","map","tx","exchange","from","to","truncate","hash","value","parseInt","date","Date","timeStamp","toLocaleString","fee","gasUsed","gasPrice","block","blockNumber","age","icon","className","fileName","_jsxFileName","lineNumber","columnNumber","push","error","str","length","slice","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/WhaleTransactions.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { FaEthereum, FaBitcoin } from \"react-icons/fa\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\n\r\nconst whaleWallets = {\r\n  \"0x8894E0a0c962CB723c1976a4421c95949bE2D4E3\": \"Binance\",\r\n  \"0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8\": \"Binance 2\",\r\n  \"0x5a52E96BAcdaBb82fd05763E25335261B270Efcb\": \"Binance 3\",\r\n};\r\n\r\nconst WhaleTransactions = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [page, setPage] = useState(1);\r\n  const offset = 20;\r\n\r\n  const fetchWhaleTransactions = async (page) => {\r\n    const API_KEY_BSC = \"P51M4PQJ9KBGFGNXJFUETUJ2HSNJ98Y26T\"; // Înlocuiește cu cheia ta\r\n\r\n    const wallets = [\r\n      {\r\n        name: \"Binance BSC\",\r\n        address: \"0x8894E0a0c962CB723c1976a4421c95949bE2D4E3\",\r\n        blockchain: \"BSC\",\r\n        apiKey: API_KEY_BSC,\r\n      },\r\n    ];\r\n\r\n    const allTransactions = [];\r\n\r\n    for (let wallet of wallets) {\r\n      const { address, blockchain, apiKey, name } = wallet;\r\n      const url = `https://api.bscscan.com/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=${page}&offset=${offset}&sort=desc&apikey=${apiKey}`;\r\n\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        console.log(\"API Response:\", data); // Verifică răspunsul API\r\n\r\n        if (data.status === \"1\" && data.result) {\r\n          const filteredTransactions = data.result; // Am scos filtrul temporar\r\n          console.log(\"Filtered Transactions:\", filteredTransactions);\r\n\r\n          const transactionsWithData = filteredTransactions.map((tx) => {\r\n            let exchange = \"Unknown\";\r\n            if (whaleWallets[tx.from]) {\r\n              exchange = whaleWallets[tx.from];\r\n            } else if (whaleWallets[tx.to]) {\r\n              exchange = whaleWallets[tx.to];\r\n            } else {\r\n              exchange = truncate(tx.from);\r\n            }\r\n\r\n            return {\r\n              hash: tx.hash,\r\n              from: tx.from,\r\n              to: tx.to,\r\n              value: parseInt(tx.value, 16) / 10 ** 18,\r\n              blockchain: \"BSC\",\r\n              exchange,\r\n              date: new Date(tx.timeStamp * 1000).toLocaleString(),\r\n              fee: tx.gasUsed\r\n                ? (parseInt(tx.gasUsed, 16) * parseInt(tx.gasPrice, 16)) /\r\n                  10 ** 18\r\n                : \"N/A\",\r\n              block: tx.blockNumber,\r\n              age: formatDistanceToNow(new Date(tx.timeStamp * 1000)),\r\n              icon: <FaBitcoin className=\"text-yellow-400 text-xl\" />,\r\n            };\r\n          });\r\n\r\n          allTransactions.push(...transactionsWithData);\r\n        } else {\r\n          console.error(`No transactions found for wallet: ${name}`);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching transactions:\", error);\r\n      }\r\n    }\r\n\r\n    console.log(\"All Transactions:\", allTransactions);\r\n    setTransactions(allTransactions);\r\n    setLoading(false);\r\n    console.log(loading); // Verifică starea loading\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWhaleTransactions(page);\r\n  }, [page]);\r\n\r\n  const truncate = (str) => {\r\n    return str.length > 15 ? `${str.slice(0, 6)}...${str.slice(-4)}` : str;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6\">\r\n      {/* ... (restul codului tău) */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhaleTransactions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}