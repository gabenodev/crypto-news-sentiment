{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\SentimentChart.js\",\n  _s = $RefreshSig$();\n// src/components/SentimentChart.js\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { format } from \"date-fns\";\n\n// Înregistrăm componentele Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction SentimentChart() {\n  _s();\n  const [sentimentData, setSentimentData] = useState({\n    labels: [],\n    // Etichete pentru axa X\n    datasets: [{\n      label: \"Sentiment Trend (Fear & Greed Index)\",\n      data: [],\n      // Datele pentru axa Y\n      fill: false,\n      // Linia nu va fi umplută\n      borderColor: \"rgba(64, 224, 208, 0.5)\",\n      // Culoare turcoaz transparentă\n      tension: 0.1,\n      // Liniile vor fi mai puțin ondulate\n      pointBackgroundColor: \"rgba(64, 224, 208, 0.7)\",\n      // Punctele vor fi turcoaz\n      pointBorderColor: \"rgba(64, 224, 208, 0.7)\",\n      // Punctele vor avea marginea turcoaz\n      pointRadius: 2 // Dimensiunea mai mică pentru puncte\n    }]\n  });\n  const fetchSentimentData = async () => {\n    try {\n      const response = await axios.get(\"https://api.alternative.me/fng/?limit=365&format=json\" // URL-ul pentru Fear and Greed Index pe 1 an\n      );\n      const sentimentScores = response.data.data.map(item => item.value); // Valorile sentimentului\n      const sentimentTimestamps = response.data.data.map(item => item.timestamp); // Timestamp-urile\n\n      // Formatarea timestamp-urilor\n      const formattedTimestamps = sentimentTimestamps.map(timestamp => format(new Date(timestamp * 1000), \"MMM dd, yyyy\") // Formatarea timestamp-urilor\n      );\n\n      // Inversăm ordinea datelor pentru a avea cea mai recentă dată în dreapta\n      const reversedTimestamps = formattedTimestamps.reverse();\n      const reversedScores = sentimentScores.reverse();\n      setSentimentData({\n        labels: reversedTimestamps,\n        // Folosim timestamp-urile inversate pe axa X\n        datasets: [{\n          label: \"Sentiment Trend (Fear & Greed Index)\",\n          data: reversedScores,\n          // Valorile de sentiment inversate pe axa Y\n          fill: false,\n          borderColor: \"rgba(64, 224, 208, 0.5)\",\n          // Culoare turcoaz transparentă\n          tension: 0.1,\n          // Liniile vor fi mai puțin ondulate\n          pointBackgroundColor: \"rgba(64, 224, 208, 0.7)\",\n          // Punctele vor fi turcoaz\n          pointBorderColor: \"rgba(64, 224, 208, 0.7)\",\n          // Punctele vor avea marginea turcoaz\n          pointRadius: 2 // Dimensiunea mai mică pentru puncte\n        }]\n      });\n    } catch (error) {\n      console.error(\"Error fetching sentiment data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchSentimentData();\n  }, []);\n\n  // Configurarea opțiunilor pentru grafic\n  const options = {\n    responsive: true,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"Date\" // Eticheta axei X\n        },\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 10,\n          // Limităm numărul de etichete pe axa X\n          maxRotation: 45,\n          // Permitem rotirea etichetelor pentru a economisi spațiu\n          minRotation: 0,\n          // Prevenim rotirea etichetelor pe axa X\n          autoSkipPadding: 10 // Adăugăm un padding pentru a preveni suprapunerea\n        },\n        // Setăm axa X să fie inversată astfel încât să avem ordinea corectă\n        reverse: false // Axa X trebuie să fie de la dreapta la stânga\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Fear and Greed Index\"\n        },\n        ticks: {\n          min: 0,\n          max: 100,\n          stepSize: 10\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-semibold text-gray-800\",\n      children: \"Market Sentiment (Fear and Greed Index)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: sentimentData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(SentimentChart, \"fsiKDFn4JzGmIAbz7BVfgzltz18=\");\n_c = SentimentChart;\nexport default SentimentChart;\nvar _c;\n$RefreshReg$(_c, \"SentimentChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","axios","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","format","jsxDEV","_jsxDEV","register","SentimentChart","_s","sentimentData","setSentimentData","labels","datasets","label","data","fill","borderColor","tension","pointBackgroundColor","pointBorderColor","pointRadius","fetchSentimentData","response","get","sentimentScores","map","item","value","sentimentTimestamps","timestamp","formattedTimestamps","Date","reversedTimestamps","reverse","reversedScores","error","console","options","responsive","scales","x","title","display","text","ticks","autoSkip","maxTicksLimit","maxRotation","minRotation","autoSkipPadding","y","min","max","stepSize","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/SentimentChart.js"],"sourcesContent":["// src/components/SentimentChart.js\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { format } from \"date-fns\";\r\n\r\n// Înregistrăm componentele Chart.js\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nfunction SentimentChart() {\r\n  const [sentimentData, setSentimentData] = useState({\r\n    labels: [], // Etichete pentru axa X\r\n    datasets: [\r\n      {\r\n        label: \"Sentiment Trend (Fear & Greed Index)\",\r\n        data: [], // Datele pentru axa Y\r\n        fill: false, // Linia nu va fi umplută\r\n        borderColor: \"rgba(64, 224, 208, 0.5)\", // Culoare turcoaz transparentă\r\n        tension: 0.1, // Liniile vor fi mai puțin ondulate\r\n        pointBackgroundColor: \"rgba(64, 224, 208, 0.7)\", // Punctele vor fi turcoaz\r\n        pointBorderColor: \"rgba(64, 224, 208, 0.7)\", // Punctele vor avea marginea turcoaz\r\n        pointRadius: 2, // Dimensiunea mai mică pentru puncte\r\n      },\r\n    ],\r\n  });\r\n\r\n  const fetchSentimentData = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"https://api.alternative.me/fng/?limit=365&format=json\" // URL-ul pentru Fear and Greed Index pe 1 an\r\n      );\r\n\r\n      const sentimentScores = response.data.data.map((item) => item.value); // Valorile sentimentului\r\n      const sentimentTimestamps = response.data.data.map(\r\n        (item) => item.timestamp\r\n      ); // Timestamp-urile\r\n\r\n      // Formatarea timestamp-urilor\r\n      const formattedTimestamps = sentimentTimestamps.map(\r\n        (timestamp) => format(new Date(timestamp * 1000), \"MMM dd, yyyy\") // Formatarea timestamp-urilor\r\n      );\r\n\r\n      // Inversăm ordinea datelor pentru a avea cea mai recentă dată în dreapta\r\n      const reversedTimestamps = formattedTimestamps.reverse();\r\n      const reversedScores = sentimentScores.reverse();\r\n\r\n      setSentimentData({\r\n        labels: reversedTimestamps, // Folosim timestamp-urile inversate pe axa X\r\n        datasets: [\r\n          {\r\n            label: \"Sentiment Trend (Fear & Greed Index)\",\r\n            data: reversedScores, // Valorile de sentiment inversate pe axa Y\r\n            fill: false,\r\n            borderColor: \"rgba(64, 224, 208, 0.5)\", // Culoare turcoaz transparentă\r\n            tension: 0.1, // Liniile vor fi mai puțin ondulate\r\n            pointBackgroundColor: \"rgba(64, 224, 208, 0.7)\", // Punctele vor fi turcoaz\r\n            pointBorderColor: \"rgba(64, 224, 208, 0.7)\", // Punctele vor avea marginea turcoaz\r\n            pointRadius: 2, // Dimensiunea mai mică pentru puncte\r\n          },\r\n        ],\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching sentiment data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSentimentData();\r\n  }, []);\r\n\r\n  // Configurarea opțiunilor pentru grafic\r\n  const options = {\r\n    responsive: true,\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: \"Date\", // Eticheta axei X\r\n        },\r\n        ticks: {\r\n          autoSkip: true,\r\n          maxTicksLimit: 10, // Limităm numărul de etichete pe axa X\r\n          maxRotation: 45, // Permitem rotirea etichetelor pentru a economisi spațiu\r\n          minRotation: 0, // Prevenim rotirea etichetelor pe axa X\r\n          autoSkipPadding: 10, // Adăugăm un padding pentru a preveni suprapunerea\r\n        },\r\n        // Setăm axa X să fie inversată astfel încât să avem ordinea corectă\r\n        reverse: false, // Axa X trebuie să fie de la dreapta la stânga\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: \"Fear and Greed Index\",\r\n        },\r\n        ticks: {\r\n          min: 0,\r\n          max: 100,\r\n          stepSize: 10,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\r\n      <h2 className=\"text-3xl font-semibold text-gray-800\">\r\n        Market Sentiment (Fear and Greed Index)\r\n      </h2>\r\n      <div className=\"mt-6\">\r\n        <Line data={sentimentData} options={options} />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default SentimentChart;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,SAASC,MAAM,QAAQ,UAAU;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAV,OAAO,CAACW,QAAQ,CACdV,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,SAASK,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC;IACjDoB,MAAM,EAAE,EAAE;IAAE;IACZC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,sCAAsC;MAC7CC,IAAI,EAAE,EAAE;MAAE;MACVC,IAAI,EAAE,KAAK;MAAE;MACbC,WAAW,EAAE,yBAAyB;MAAE;MACxCC,OAAO,EAAE,GAAG;MAAE;MACdC,oBAAoB,EAAE,yBAAyB;MAAE;MACjDC,gBAAgB,EAAE,yBAAyB;MAAE;MAC7CC,WAAW,EAAE,CAAC,CAAE;IAClB,CAAC;EAEL,CAAC,CAAC;EAEF,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAC9B,uDAAuD,CAAC;MAC1D,CAAC;MAED,MAAMC,eAAe,GAAGF,QAAQ,CAACR,IAAI,CAACA,IAAI,CAACW,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;MACtE,MAAMC,mBAAmB,GAAGN,QAAQ,CAACR,IAAI,CAACA,IAAI,CAACW,GAAG,CAC/CC,IAAI,IAAKA,IAAI,CAACG,SACjB,CAAC,CAAC,CAAC;;MAEH;MACA,MAAMC,mBAAmB,GAAGF,mBAAmB,CAACH,GAAG,CAChDI,SAAS,IAAK1B,MAAM,CAAC,IAAI4B,IAAI,CAACF,SAAS,GAAG,IAAI,CAAC,EAAE,cAAc,CAAC,CAAC;MACpE,CAAC;;MAED;MACA,MAAMG,kBAAkB,GAAGF,mBAAmB,CAACG,OAAO,CAAC,CAAC;MACxD,MAAMC,cAAc,GAAGV,eAAe,CAACS,OAAO,CAAC,CAAC;MAEhDvB,gBAAgB,CAAC;QACfC,MAAM,EAAEqB,kBAAkB;QAAE;QAC5BpB,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,sCAAsC;UAC7CC,IAAI,EAAEoB,cAAc;UAAE;UACtBnB,IAAI,EAAE,KAAK;UACXC,WAAW,EAAE,yBAAyB;UAAE;UACxCC,OAAO,EAAE,GAAG;UAAE;UACdC,oBAAoB,EAAE,yBAAyB;UAAE;UACjDC,gBAAgB,EAAE,yBAAyB;UAAE;UAC7CC,WAAW,EAAE,CAAC,CAAE;QAClB,CAAC;MAEL,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;EAED7C,SAAS,CAAC,MAAM;IACd+B,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMgB,OAAO,GAAG;IACdC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE,MAAM,CAAE;QAChB,CAAC;QACDC,KAAK,EAAE;UACLC,QAAQ,EAAE,IAAI;UACdC,aAAa,EAAE,EAAE;UAAE;UACnBC,WAAW,EAAE,EAAE;UAAE;UACjBC,WAAW,EAAE,CAAC;UAAE;UAChBC,eAAe,EAAE,EAAE,CAAE;QACvB,CAAC;QACD;QACAhB,OAAO,EAAE,KAAK,CAAE;MAClB,CAAC;MACDiB,CAAC,EAAE;QACDT,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;QACR,CAAC;QACDC,KAAK,EAAE;UACLO,GAAG,EAAE,CAAC;UACNC,GAAG,EAAE,GAAG;UACRC,QAAQ,EAAE;QACZ;MACF;IACF;EACF,CAAC;EAED,oBACEhD,OAAA;IAASiD,SAAS,EAAC,8CAA8C;IAAAC,QAAA,gBAC/DlD,OAAA;MAAIiD,SAAS,EAAC,sCAAsC;MAAAC,QAAA,EAAC;IAErD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLtD,OAAA;MAAKiD,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnBlD,OAAA,CAACb,IAAI;QAACsB,IAAI,EAAEL,aAAc;QAAC4B,OAAO,EAAEA;MAAQ;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEd;AAACnD,EAAA,CAxGQD,cAAc;AAAAqD,EAAA,GAAdrD,cAAc;AA0GvB,eAAeA,cAAc;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}