{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\SentimentChart.js\",\n  _s = $RefreshSig$();\n// src/components/SentimentChart.js\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { format } from \"date-fns\";\n\n// Înregistrăm componentele Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction SentimentChart({\n  isNightMode\n}) {\n  _s();\n  const [sentimentData, setSentimentData] = useState({\n    labels: [],\n    datasets: []\n  });\n  const [timeframe, setTimeframe] = useState(\"365\"); // Default la 1 an (365 zile)\n\n  // Fetch data în funcție de intervalul de timp selectat\n  const fetchSentimentData = async limit => {\n    try {\n      let url = \"\";\n      // Verificăm dacă vrem să luăm datele pentru întreaga perioadă\n      if (limit === \"max\") {\n        // API-ul nu acceptă o valoare directă de \"max\", deci folosim 2000\n        url = \"https://api.alternative.me/fng/?limit=2000&format=json\";\n      } else {\n        url = `https://api.alternative.me/fng/?limit=${limit}&format=json`;\n      }\n      const response = await axios.get(url);\n      const sentimentScores = response.data.data.map(item => parseInt(item.value));\n      const sentimentTimestamps = response.data.data.map(item => format(new Date(item.timestamp * 1000), \"MMM dd, yyyy\"));\n\n      // Inversăm datele pentru a avea cea mai recentă dată în dreapta\n      const reversedTimestamps = sentimentTimestamps.reverse();\n      const reversedScores = sentimentScores.reverse();\n      setSentimentData({\n        labels: reversedTimestamps,\n        datasets: [{\n          label: \"Sentiment Trend (Fear & Greed Index)\",\n          data: reversedScores,\n          fill: false,\n          borderColor: \"#23d996\",\n          // Culoare linie turcoaz\n          backgroundColor: \"#23d996\",\n          // Culoare linie turcoaz\n          tension: 0.1,\n          pointBackgroundColor: \"#23d996\",\n          // Culoare puncte turcoaz\n          pointBorderColor: \"#23d996\",\n          // Culoare puncte turcoaz\n          pointRadius: 3,\n          // Puncte mai mici\n          pointHoverRadius: 4,\n          // Puncte la hover\n          borderWidth: 2 // Grosimea liniei\n        }]\n      });\n    } catch (error) {\n      console.error(\"Error fetching sentiment data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchSentimentData(timeframe); // Fetch data când se schimbă intervalul de timp\n  }, [timeframe]);\n  const handleTimeframeChange = e => {\n    setTimeframe(e.target.value);\n  };\n  const options = {\n    responsive: true,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"Date\"\n        },\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 10,\n          maxRotation: 45\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Fear and Greed Index\"\n        },\n        ticks: {\n          min: 0,\n          max: 100,\n          stepSize: 10\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: timeframe,\n        onChange: handleTimeframeChange,\n        className: \"bg-gray-200 text-gray-700 px-4 py-2 rounded-md appearance-none\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"7\",\n          children: \"Last 7 Days\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"30\",\n          children: \"Last 30 Days\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"365\",\n          children: \"Last 1 Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"max\",\n          children: \"All Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: sentimentData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(SentimentChart, \"0clnuxZ68owlvE/Tl3oHY/ilTko=\");\n_c = SentimentChart;\nexport default SentimentChart;\nvar _c;\n$RefreshReg$(_c, \"SentimentChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","axios","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","format","jsxDEV","_jsxDEV","register","SentimentChart","isNightMode","_s","sentimentData","setSentimentData","labels","datasets","timeframe","setTimeframe","fetchSentimentData","limit","url","response","get","sentimentScores","data","map","item","parseInt","value","sentimentTimestamps","Date","timestamp","reversedTimestamps","reverse","reversedScores","label","fill","borderColor","backgroundColor","tension","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","borderWidth","error","console","handleTimeframeChange","e","target","options","responsive","scales","x","title","display","text","ticks","autoSkip","maxTicksLimit","maxRotation","y","min","max","stepSize","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/SentimentChart.js"],"sourcesContent":["// src/components/SentimentChart.js\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { format } from \"date-fns\";\r\n\r\n// Înregistrăm componentele Chart.js\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nfunction SentimentChart({ isNightMode }) {\r\n  const [sentimentData, setSentimentData] = useState({\r\n    labels: [],\r\n    datasets: [],\r\n  });\r\n  const [timeframe, setTimeframe] = useState(\"365\"); // Default la 1 an (365 zile)\r\n\r\n  // Fetch data în funcție de intervalul de timp selectat\r\n  const fetchSentimentData = async (limit) => {\r\n    try {\r\n      let url = \"\";\r\n      // Verificăm dacă vrem să luăm datele pentru întreaga perioadă\r\n      if (limit === \"max\") {\r\n        // API-ul nu acceptă o valoare directă de \"max\", deci folosim 2000\r\n        url = \"https://api.alternative.me/fng/?limit=2000&format=json\";\r\n      } else {\r\n        url = `https://api.alternative.me/fng/?limit=${limit}&format=json`;\r\n      }\r\n\r\n      const response = await axios.get(url);\r\n\r\n      const sentimentScores = response.data.data.map((item) =>\r\n        parseInt(item.value)\r\n      );\r\n      const sentimentTimestamps = response.data.data.map((item) =>\r\n        format(new Date(item.timestamp * 1000), \"MMM dd, yyyy\")\r\n      );\r\n\r\n      // Inversăm datele pentru a avea cea mai recentă dată în dreapta\r\n      const reversedTimestamps = sentimentTimestamps.reverse();\r\n      const reversedScores = sentimentScores.reverse();\r\n\r\n      setSentimentData({\r\n        labels: reversedTimestamps,\r\n        datasets: [\r\n          {\r\n            label: \"Sentiment Trend (Fear & Greed Index)\",\r\n            data: reversedScores,\r\n            fill: false,\r\n            borderColor: \"#23d996\", // Culoare linie turcoaz\r\n            backgroundColor: \"#23d996\", // Culoare linie turcoaz\r\n            tension: 0.1,\r\n            pointBackgroundColor: \"#23d996\", // Culoare puncte turcoaz\r\n            pointBorderColor: \"#23d996\", // Culoare puncte turcoaz\r\n            pointRadius: 3, // Puncte mai mici\r\n            pointHoverRadius: 4, // Puncte la hover\r\n            borderWidth: 2, // Grosimea liniei\r\n          },\r\n        ],\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching sentiment data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSentimentData(timeframe); // Fetch data când se schimbă intervalul de timp\r\n  }, [timeframe]);\r\n\r\n  const handleTimeframeChange = (e) => {\r\n    setTimeframe(e.target.value);\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    scales: {\r\n      x: {\r\n        title: { display: true, text: \"Date\" },\r\n        ticks: { autoSkip: true, maxTicksLimit: 10, maxRotation: 45 },\r\n      },\r\n      y: {\r\n        title: { display: true, text: \"Fear and Greed Index\" },\r\n        ticks: { min: 0, max: 100, stepSize: 10 },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\r\n      {/* Schimbă culoarea textului în funcție de night mode */}\r\n\r\n      <div className=\"mt-6\">\r\n        {/* Dropdown pentru alegerea intervalului de timp */}\r\n        <select\r\n          value={timeframe}\r\n          onChange={handleTimeframeChange}\r\n          className=\"bg-gray-200 text-gray-700 px-4 py-2 rounded-md appearance-none\"\r\n        >\r\n          <option value=\"7\">Last 7 Days</option>\r\n          <option value=\"30\">Last 30 Days</option>\r\n          <option value=\"365\">Last 1 Year</option>\r\n          <option value=\"max\">All Time</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"mt-6\">\r\n        <Line data={sentimentData} options={options} />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default SentimentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}