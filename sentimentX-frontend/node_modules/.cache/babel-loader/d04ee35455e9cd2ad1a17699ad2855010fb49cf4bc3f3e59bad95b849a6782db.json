{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\AltcoinSeason.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AltcoinSeason = () => {\n  _s();\n  const [altcoinsOutperformingBTC, setAltcoinsOutperformingBTC] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [outperformingCount, setOutperformingCount] = useState(0);\n  const [totalAltcoins, setTotalAltcoins] = useState(0);\n  useEffect(() => {\n    const fetchAltcoinSeason = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch datele pentru primele 50 de criptomonede, excluzând stablecoins și asset-backed tokens\n        const response = await fetch(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=50&page=1\");\n        const data = await response.json();\n\n        // Excludem stablecoins și asset-backed tokens\n        const excludedCoins = [\"tether\", \"dai\", \"wrapped-bitcoin\", \"staked-ether\", \"chainlink\"];\n        const filteredData = data.filter(coin => !excludedCoins.includes(coin.id));\n        let outperformingCountTemp = 0;\n        const totalAltcoinsTemp = filteredData.length;\n\n        // Verifică performanța fiecărei monede față de Bitcoin pe perioada de 90 de zile\n        for (let coin of filteredData) {\n          // Verifică dacă datele sunt valide pentru coin și BTC\n          const bitcoin = data.find(coin => coin.id === \"bitcoin\");\n          if (coin.price_change_percentage_90d && bitcoin.price_change_percentage_90d) {\n            if (coin.price_change_percentage_90d > bitcoin.price_change_percentage_90d) {\n              outperformingCountTemp++;\n            }\n          }\n        }\n        setOutperformingCount(outperformingCountTemp);\n        setTotalAltcoins(totalAltcoinsTemp);\n\n        // Calculăm procentajul de altcoins care au performat mai bine decât BTC\n        const percentage = outperformingCountTemp / totalAltcoinsTemp * 100;\n        setAltcoinsOutperformingBTC(percentage >= 75); // Dacă mai mult de 75% din monede au depășit BTC\n      } catch (error) {\n        console.error(\"Error fetching altcoin season data:\", error);\n        setAltcoinsOutperformingBTC(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAltcoinSeason();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Calculul procentajului\n  const percentage = outperformingCount / totalAltcoins * 100;\n\n  // Determină dacă este Altcoin Season\n  const isAltcoinSeason = altcoinsOutperformingBTC;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 rounded-lg bg-gray-200 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-2\",\n      children: isAltcoinSeason ? \"It's Altcoin Season (75% of top 50 coins outperforming BTC)\" : \"It's not Altcoin Season.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-300 h-4 rounded-full\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-4 rounded-full\",\n        style: {\n          width: `${percentage}%`,\n          // Folosim procentajul calculat\n          backgroundColor: isAltcoinSeason ? \"#23d996\" : \"#ff4444\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-lg\",\n      children: isAltcoinSeason ? `75% of altcoins have performed better than Bitcoin over the last 90 days (${outperformingCount} of ${totalAltcoins} altcoins)` : `Less than 75% of altcoins have outperformed Bitcoin (${outperformingCount} of ${totalAltcoins} altcoins)`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(AltcoinSeason, \"hPrmms3HxPd7gqq+03lS9tpxyzQ=\");\n_c = AltcoinSeason;\nexport default AltcoinSeason;\nvar _c;\n$RefreshReg$(_c, \"AltcoinSeason\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AltcoinSeason","_s","altcoinsOutperformingBTC","setAltcoinsOutperformingBTC","loading","setLoading","outperformingCount","setOutperformingCount","totalAltcoins","setTotalAltcoins","fetchAltcoinSeason","response","fetch","data","json","excludedCoins","filteredData","filter","coin","includes","id","outperformingCountTemp","totalAltcoinsTemp","length","bitcoin","find","price_change_percentage_90d","percentage","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","isAltcoinSeason","className","style","width","backgroundColor","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/AltcoinSeason.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst AltcoinSeason = () => {\r\n  const [altcoinsOutperformingBTC, setAltcoinsOutperformingBTC] =\r\n    useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [outperformingCount, setOutperformingCount] = useState(0);\r\n  const [totalAltcoins, setTotalAltcoins] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchAltcoinSeason = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Fetch datele pentru primele 50 de criptomonede, excluzând stablecoins și asset-backed tokens\r\n        const response = await fetch(\r\n          \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=50&page=1\"\r\n        );\r\n        const data = await response.json();\r\n\r\n        // Excludem stablecoins și asset-backed tokens\r\n        const excludedCoins = [\r\n          \"tether\",\r\n          \"dai\",\r\n          \"wrapped-bitcoin\",\r\n          \"staked-ether\",\r\n          \"chainlink\",\r\n        ];\r\n\r\n        const filteredData = data.filter(\r\n          (coin) => !excludedCoins.includes(coin.id)\r\n        );\r\n\r\n        let outperformingCountTemp = 0;\r\n        const totalAltcoinsTemp = filteredData.length;\r\n\r\n        // Verifică performanța fiecărei monede față de Bitcoin pe perioada de 90 de zile\r\n        for (let coin of filteredData) {\r\n          // Verifică dacă datele sunt valide pentru coin și BTC\r\n          const bitcoin = data.find((coin) => coin.id === \"bitcoin\");\r\n          if (\r\n            coin.price_change_percentage_90d &&\r\n            bitcoin.price_change_percentage_90d\r\n          ) {\r\n            if (\r\n              coin.price_change_percentage_90d >\r\n              bitcoin.price_change_percentage_90d\r\n            ) {\r\n              outperformingCountTemp++;\r\n            }\r\n          }\r\n        }\r\n\r\n        setOutperformingCount(outperformingCountTemp);\r\n        setTotalAltcoins(totalAltcoinsTemp);\r\n\r\n        // Calculăm procentajul de altcoins care au performat mai bine decât BTC\r\n        const percentage = (outperformingCountTemp / totalAltcoinsTemp) * 100;\r\n        setAltcoinsOutperformingBTC(percentage >= 75); // Dacă mai mult de 75% din monede au depășit BTC\r\n      } catch (error) {\r\n        console.error(\"Error fetching altcoin season data:\", error);\r\n        setAltcoinsOutperformingBTC(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAltcoinSeason();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Calculul procentajului\r\n  const percentage = (outperformingCount / totalAltcoins) * 100;\r\n\r\n  // Determină dacă este Altcoin Season\r\n  const isAltcoinSeason = altcoinsOutperformingBTC;\r\n\r\n  return (\r\n    <div className=\"p-4 rounded-lg bg-gray-200 text-center\">\r\n      <h2 className=\"text-xl font-semibold mb-2\">\r\n        {isAltcoinSeason\r\n          ? \"It's Altcoin Season (75% of top 50 coins outperforming BTC)\"\r\n          : \"It's not Altcoin Season.\"}\r\n      </h2>\r\n\r\n      <div className=\"w-full bg-gray-300 h-4 rounded-full\">\r\n        <div\r\n          className=\"h-4 rounded-full\"\r\n          style={{\r\n            width: `${percentage}%`, // Folosim procentajul calculat\r\n            backgroundColor: isAltcoinSeason ? \"#23d996\" : \"#ff4444\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n\r\n      <p className=\"mt-2 text-lg\">\r\n        {isAltcoinSeason\r\n          ? `75% of altcoins have performed better than Bitcoin over the last 90 days (${outperformingCount} of ${totalAltcoins} altcoins)`\r\n          : `Less than 75% of altcoins have outperformed Bitcoin (${outperformingCount} of ${totalAltcoins} altcoins)`}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AltcoinSeason;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}