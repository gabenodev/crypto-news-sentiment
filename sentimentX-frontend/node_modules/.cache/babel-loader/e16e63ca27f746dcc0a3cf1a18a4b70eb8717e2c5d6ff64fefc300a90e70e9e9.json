{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\WhaleTransactions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhaleTransactions = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchWhaleTransactions = async () => {\n      const API_KEY_ETH = \"RP1AAGBP2YNUWFTAFP6KWT7GRRKC5BG5MM\"; // Înlocuiește cu API-ul tău Etherscan pentru Ethereum\n      const API_KEY_BSC = \"API_TĂU_KEY_BSC\"; // Înlocuiește cu API-ul tău BscScan pentru Binance Smart Chain\n\n      // Listează adresele portofelelor și blockchainurile pentru care vrem tranzacțiile\n      const wallets = [{\n        name: \"Binance\",\n        address: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n        blockchain: \"ETH\",\n        // Ethereum\n        apiKey: API_KEY_ETH\n      }, {\n        name: \"Coinbase\",\n        address: \"0x5d69c5e4727f0d2f6b8a64358d9e4c8981b9bb6f\",\n        blockchain: \"ETH\",\n        // Ethereum\n        apiKey: API_KEY_ETH\n      }, {\n        name: \"PancakeSwap\",\n        address: \"0x7a80d8d3d77222b9f6889b5e8b6a7ef5d7f086df\",\n        blockchain: \"BSC\",\n        // Binance Smart Chain\n        apiKey: API_KEY_BSC\n      }, {\n        name: \"FTX\",\n        address: \"0x9e8cb2fae327d2a22b5d1e9db1734f97511fba9f\",\n        blockchain: \"ETH\",\n        // Ethereum\n        apiKey: API_KEY_ETH\n      }, {\n        name: \"Kraken\",\n        address: \"0xd15b408d14ec0ec6d9c2f4b4b1ed1b4d3b53c4b1\",\n        blockchain: \"ETH\",\n        // Ethereum\n        apiKey: API_KEY_ETH\n      }, {\n        name: \"Bitfinex\",\n        address: \"0x32c91b3abfffa07e33c5894a9d7e2907d69a4e8f\",\n        blockchain: \"ETH\",\n        // Ethereum\n        apiKey: API_KEY_ETH\n      }, {\n        name: \"Huobi\",\n        address: \"0x25a10d3bb739d57f74f7ed6724e3769f04529c18\",\n        blockchain: \"ETH\",\n        // Ethereum\n        apiKey: API_KEY_ETH\n      }];\n      const allTransactions = [];\n      for (let wallet of wallets) {\n        const {\n          address,\n          blockchain,\n          apiKey\n        } = wallet;\n        const url = blockchain === \"ETH\" ? `https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${apiKey}` : `https://api.bscscan.com/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${apiKey}`;\n        try {\n          const response = await fetch(url);\n          const data = await response.json();\n          console.log(data); // Verifică răspunsul API-ului\n\n          if (data.status === \"1\") {\n            // Filtrăm tranzacțiile care au mai mult de 1 ETH / BNB\n            const filteredTransactions = data.result.filter(tx => parseFloat(tx.value) > 10 ** 18); // > 1 ETH / BNB\n\n            const transactionsWithData = filteredTransactions.map(tx => ({\n              from: tx.from,\n              to: tx.to,\n              value: tx.value / 10 ** 18,\n              blockchain,\n              date: new Date(tx.timeStamp * 1000).toLocaleString() // Convertim timestamp în data/ora umană\n            }));\n            allTransactions.push(...transactionsWithData);\n          } else {\n            console.error(\"Nu s-au găsit tranzacții pentru portofelul:\", wallet.name);\n          }\n        } catch (error) {\n          console.error(\"Eroare la obținerea tranzacțiilor:\", error);\n        }\n      }\n      setTransactions(allTransactions);\n      setLoading(false);\n    };\n    fetchWhaleTransactions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Whale Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\xCEnc\\u0103rc\\u0103m tranzac\\u021Biile...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.length > 0 ? transactions.map((tx, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [tx.from, \" a transferat \", tx.value, \" \", tx.blockchain === \"ETH\" ? \"ETH\" : \"BNB\", \" c\\u0103tre \", tx.to]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Data/ora:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 19\n          }, this), \" \", tx.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nu sunt tranzac\\u021Bii mari disponibile \\xEEn acest moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(WhaleTransactions, \"DUmkRmOc9OB7ZZSQstrrGiz1MwE=\");\n_c = WhaleTransactions;\nexport default WhaleTransactions;\nvar _c;\n$RefreshReg$(_c, \"WhaleTransactions\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WhaleTransactions","_s","transactions","setTransactions","loading","setLoading","fetchWhaleTransactions","API_KEY_ETH","API_KEY_BSC","wallets","name","address","blockchain","apiKey","allTransactions","wallet","url","response","fetch","data","json","console","log","status","filteredTransactions","result","filter","tx","parseFloat","value","transactionsWithData","map","from","to","date","Date","timeStamp","toLocaleString","push","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","index","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/WhaleTransactions.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst WhaleTransactions = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchWhaleTransactions = async () => {\r\n      const API_KEY_ETH = \"RP1AAGBP2YNUWFTAFP6KWT7GRRKC5BG5MM\"; // Înlocuiește cu API-ul tău Etherscan pentru Ethereum\r\n      const API_KEY_BSC = \"API_TĂU_KEY_BSC\"; // Înlocuiește cu API-ul tău BscScan pentru Binance Smart Chain\r\n\r\n      // Listează adresele portofelelor și blockchainurile pentru care vrem tranzacțiile\r\n      const wallets = [\r\n        {\r\n          name: \"Binance\",\r\n          address: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\r\n          blockchain: \"ETH\", // Ethereum\r\n          apiKey: API_KEY_ETH,\r\n        },\r\n        {\r\n          name: \"Coinbase\",\r\n          address: \"0x5d69c5e4727f0d2f6b8a64358d9e4c8981b9bb6f\",\r\n          blockchain: \"ETH\", // Ethereum\r\n          apiKey: API_KEY_ETH,\r\n        },\r\n        {\r\n          name: \"PancakeSwap\",\r\n          address: \"0x7a80d8d3d77222b9f6889b5e8b6a7ef5d7f086df\",\r\n          blockchain: \"BSC\", // Binance Smart Chain\r\n          apiKey: API_KEY_BSC,\r\n        },\r\n        {\r\n          name: \"FTX\",\r\n          address: \"0x9e8cb2fae327d2a22b5d1e9db1734f97511fba9f\",\r\n          blockchain: \"ETH\", // Ethereum\r\n          apiKey: API_KEY_ETH,\r\n        },\r\n        {\r\n          name: \"Kraken\",\r\n          address: \"0xd15b408d14ec0ec6d9c2f4b4b1ed1b4d3b53c4b1\",\r\n          blockchain: \"ETH\", // Ethereum\r\n          apiKey: API_KEY_ETH,\r\n        },\r\n        {\r\n          name: \"Bitfinex\",\r\n          address: \"0x32c91b3abfffa07e33c5894a9d7e2907d69a4e8f\",\r\n          blockchain: \"ETH\", // Ethereum\r\n          apiKey: API_KEY_ETH,\r\n        },\r\n        {\r\n          name: \"Huobi\",\r\n          address: \"0x25a10d3bb739d57f74f7ed6724e3769f04529c18\",\r\n          blockchain: \"ETH\", // Ethereum\r\n          apiKey: API_KEY_ETH,\r\n        },\r\n      ];\r\n\r\n      const allTransactions = [];\r\n\r\n      for (let wallet of wallets) {\r\n        const { address, blockchain, apiKey } = wallet;\r\n        const url =\r\n          blockchain === \"ETH\"\r\n            ? `https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${apiKey}`\r\n            : `https://api.bscscan.com/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${apiKey}`;\r\n\r\n        try {\r\n          const response = await fetch(url);\r\n          const data = await response.json();\r\n          console.log(data); // Verifică răspunsul API-ului\r\n\r\n          if (data.status === \"1\") {\r\n            // Filtrăm tranzacțiile care au mai mult de 1 ETH / BNB\r\n            const filteredTransactions = data.result.filter(\r\n              (tx) => parseFloat(tx.value) > 10 ** 18\r\n            ); // > 1 ETH / BNB\r\n\r\n            const transactionsWithData = filteredTransactions.map((tx) => ({\r\n              from: tx.from,\r\n              to: tx.to,\r\n              value: tx.value / 10 ** 18,\r\n              blockchain,\r\n              date: new Date(tx.timeStamp * 1000).toLocaleString(), // Convertim timestamp în data/ora umană\r\n            }));\r\n\r\n            allTransactions.push(...transactionsWithData);\r\n          } else {\r\n            console.error(\r\n              \"Nu s-au găsit tranzacții pentru portofelul:\",\r\n              wallet.name\r\n            );\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Eroare la obținerea tranzacțiilor:\", error);\r\n        }\r\n      }\r\n\r\n      setTransactions(allTransactions);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchWhaleTransactions();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Whale Transactions</h2>\r\n      {loading ? (\r\n        <p>Încărcăm tranzacțiile...</p>\r\n      ) : (\r\n        <ul>\r\n          {transactions.length > 0 ? (\r\n            transactions.map((tx, index) => (\r\n              <li key={index}>\r\n                <p>\r\n                  {tx.from} a transferat {tx.value}{\" \"}\r\n                  {tx.blockchain === \"ETH\" ? \"ETH\" : \"BNB\"} către {tx.to}\r\n                </p>\r\n                <p>\r\n                  <strong>Data/ora:</strong> {tx.date}\r\n                </p>\r\n              </li>\r\n            ))\r\n          ) : (\r\n            <p>Nu sunt tranzacții mari disponibile în acest moment.</p>\r\n          )}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhaleTransactions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}