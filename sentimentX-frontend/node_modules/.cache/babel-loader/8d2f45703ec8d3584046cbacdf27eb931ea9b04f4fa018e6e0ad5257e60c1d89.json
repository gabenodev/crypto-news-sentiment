{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\SentimentChart.js\",\n  _s = $RefreshSig$();\n// src/components/SentimentChart.js\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { format } from \"date-fns\"; // Importăm funcția de formatare a datelor\n\n// Înregistrăm componentele Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction SentimentChart() {\n  _s();\n  const [sentimentData, setSentimentData] = useState({\n    labels: [],\n    // Aici vom pune datele formate\n    datasets: [{\n      label: \"Sentiment Trend (Fear & Greed Index)\",\n      data: [],\n      // Aici vor fi valorile sentimentului\n      fill: false,\n      borderColor: \"rgb(75, 192, 192)\",\n      tension: 0.1\n    }]\n  });\n  const fetchSentimentData = async () => {\n    try {\n      const response = await axios.get(\"https://api.alternative.me/fng/?limit=5&format=json\" // URL-ul pentru Fear and Greed Index\n      );\n\n      // Extragem datele de sentiment pentru Bitcoin\n      const sentimentScores = response.data.data.map(item => item.value); // Valorile sentimentului\n      const sentimentTimestamps = response.data.data.map(item => format(new Date(item.timestamp), \"MMM dd, yyyy\")); // Formatarea timestamp-urilor\n\n      setSentimentData({\n        labels: sentimentTimestamps,\n        // Folosim timestamp-urile formate pe axa X\n        datasets: [{\n          label: \"Sentiment Trend (Fear & Greed Index)\",\n          data: sentimentScores,\n          // Valorile de sentiment pe axa Y\n          fill: false,\n          borderColor: \"rgb(75, 192, 192)\",\n          tension: 0.1\n        }]\n      });\n    } catch (error) {\n      console.error(\"Error fetching sentiment data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchSentimentData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-semibold text-gray-800\",\n      children: \"Market Sentiment (Fear and Greed Index)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: sentimentData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(SentimentChart, \"l3GH5Pgrd71nbkdBwfegyG5RGv8=\");\n_c = SentimentChart;\nexport default SentimentChart;\nvar _c;\n$RefreshReg$(_c, \"SentimentChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","axios","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","format","jsxDEV","_jsxDEV","register","SentimentChart","_s","sentimentData","setSentimentData","labels","datasets","label","data","fill","borderColor","tension","fetchSentimentData","response","get","sentimentScores","map","item","value","sentimentTimestamps","Date","timestamp","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/SentimentChart.js"],"sourcesContent":["// src/components/SentimentChart.js\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { format } from \"date-fns\"; // Importăm funcția de formatare a datelor\r\n\r\n// Înregistrăm componentele Chart.js\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nfunction SentimentChart() {\r\n  const [sentimentData, setSentimentData] = useState({\r\n    labels: [], // Aici vom pune datele formate\r\n    datasets: [\r\n      {\r\n        label: \"Sentiment Trend (Fear & Greed Index)\",\r\n        data: [], // Aici vor fi valorile sentimentului\r\n        fill: false,\r\n        borderColor: \"rgb(75, 192, 192)\",\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  });\r\n\r\n  const fetchSentimentData = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"https://api.alternative.me/fng/?limit=5&format=json\" // URL-ul pentru Fear and Greed Index\r\n      );\r\n\r\n      // Extragem datele de sentiment pentru Bitcoin\r\n      const sentimentScores = response.data.data.map((item) => item.value); // Valorile sentimentului\r\n      const sentimentTimestamps = response.data.data.map((item) =>\r\n        format(new Date(item.timestamp), \"MMM dd, yyyy\")\r\n      ); // Formatarea timestamp-urilor\r\n\r\n      setSentimentData({\r\n        labels: sentimentTimestamps, // Folosim timestamp-urile formate pe axa X\r\n        datasets: [\r\n          {\r\n            label: \"Sentiment Trend (Fear & Greed Index)\",\r\n            data: sentimentScores, // Valorile de sentiment pe axa Y\r\n            fill: false,\r\n            borderColor: \"rgb(75, 192, 192)\",\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching sentiment data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSentimentData();\r\n  }, []);\r\n\r\n  return (\r\n    <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\r\n      <h2 className=\"text-3xl font-semibold text-gray-800\">\r\n        Market Sentiment (Fear and Greed Index)\r\n      </h2>\r\n      <div className=\"mt-6\">\r\n        <Line data={sentimentData} />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default SentimentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}