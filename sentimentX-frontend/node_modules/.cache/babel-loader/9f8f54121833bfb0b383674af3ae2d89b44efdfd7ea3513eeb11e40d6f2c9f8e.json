{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\AltcoinSeason.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AltcoinSeason = () => {\n  _s();\n  const [dominance, setDominance] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Apel API pentru a obține datele necesare\n    const fetchAltcoinSeason = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(\"https://api.coingecko.com/api/v3/global\");\n        const data = await response.json();\n        const bitcoinDominance = data.data.market_cap_percentage.btc;\n        setDominance(bitcoinDominance);\n      } catch (error) {\n        console.error(\"Error fetching altcoin season data:\", error);\n        setDominance(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAltcoinSeason();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Calculează procentajul altcoin season\n  const altcoinSeasonPercentage = 100 - dominance; // 0 = BTC dominance 100%, 100 = BTC dominance 0%\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 rounded-lg bg-gray-200 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-2\",\n      children: altcoinSeasonPercentage >= 50 ? \"It's Altcoin Season!\" : \"It's not Altcoin Season.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-300 h-4 rounded-full\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-4 rounded-full\",\n        style: {\n          width: `${altcoinSeasonPercentage}%`,\n          backgroundColor: altcoinSeasonPercentage >= 50 ? \"#23d996\" : \"#ff4444\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-lg\",\n      children: [Math.round(altcoinSeasonPercentage), \"% Altcoin Season\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(AltcoinSeason, \"VfjE81eo83c+BaQ0sLQ4MAR54xo=\");\n_c = AltcoinSeason;\nexport default AltcoinSeason;\nvar _c;\n$RefreshReg$(_c, \"AltcoinSeason\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AltcoinSeason","_s","dominance","setDominance","loading","setLoading","fetchAltcoinSeason","response","fetch","data","json","bitcoinDominance","market_cap_percentage","btc","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","altcoinSeasonPercentage","className","style","width","backgroundColor","Math","round","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/AltcoinSeason.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst AltcoinSeason = () => {\r\n  const [dominance, setDominance] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Apel API pentru a obține datele necesare\r\n    const fetchAltcoinSeason = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await fetch(\"https://api.coingecko.com/api/v3/global\");\r\n        const data = await response.json();\r\n        const bitcoinDominance = data.data.market_cap_percentage.btc;\r\n\r\n        setDominance(bitcoinDominance);\r\n      } catch (error) {\r\n        console.error(\"Error fetching altcoin season data:\", error);\r\n        setDominance(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAltcoinSeason();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Calculează procentajul altcoin season\r\n  const altcoinSeasonPercentage = 100 - dominance; // 0 = BTC dominance 100%, 100 = BTC dominance 0%\r\n\r\n  return (\r\n    <div className=\"p-4 rounded-lg bg-gray-200 text-center\">\r\n      <h2 className=\"text-xl font-semibold mb-2\">\r\n        {altcoinSeasonPercentage >= 50\r\n          ? \"It's Altcoin Season!\"\r\n          : \"It's not Altcoin Season.\"}\r\n      </h2>\r\n\r\n      <div className=\"w-full bg-gray-300 h-4 rounded-full\">\r\n        <div\r\n          className=\"h-4 rounded-full\"\r\n          style={{\r\n            width: `${altcoinSeasonPercentage}%`,\r\n            backgroundColor:\r\n              altcoinSeasonPercentage >= 50 ? \"#23d996\" : \"#ff4444\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n\r\n      <p className=\"mt-2 text-lg\">\r\n        {Math.round(altcoinSeasonPercentage)}% Altcoin Season\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AltcoinSeason;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACFD,UAAU,CAAC,IAAI,CAAC;QAChB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,CAAC;QACvE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,MAAMC,gBAAgB,GAAGF,IAAI,CAACA,IAAI,CAACG,qBAAqB,CAACC,GAAG;QAE5DV,YAAY,CAACQ,gBAAgB,CAAC;MAChC,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3DX,YAAY,CAAC,IAAI,CAAC;MACpB,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAiB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,MAAMC,uBAAuB,GAAG,GAAG,GAAGnB,SAAS,CAAC,CAAC;;EAEjD,oBACEH,OAAA;IAAKuB,SAAS,EAAC,wCAAwC;IAAAN,QAAA,gBACrDjB,OAAA;MAAIuB,SAAS,EAAC,4BAA4B;MAAAN,QAAA,EACvCK,uBAAuB,IAAI,EAAE,GAC1B,sBAAsB,GACtB;IAA0B;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eAELrB,OAAA;MAAKuB,SAAS,EAAC,qCAAqC;MAAAN,QAAA,eAClDjB,OAAA;QACEuB,SAAS,EAAC,kBAAkB;QAC5BC,KAAK,EAAE;UACLC,KAAK,EAAE,GAAGH,uBAAuB,GAAG;UACpCI,eAAe,EACbJ,uBAAuB,IAAI,EAAE,GAAG,SAAS,GAAG;QAChD;MAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAENrB,OAAA;MAAGuB,SAAS,EAAC,cAAc;MAAAN,QAAA,GACxBU,IAAI,CAACC,KAAK,CAACN,uBAAuB,CAAC,EAAC,kBACvC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACnB,EAAA,CAxDID,aAAa;AAAA4B,EAAA,GAAb5B,aAAa;AA0DnB,eAAeA,aAAa;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}