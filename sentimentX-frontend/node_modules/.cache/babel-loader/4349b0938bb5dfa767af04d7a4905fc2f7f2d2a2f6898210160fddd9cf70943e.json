{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\EthScan.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const fetchWhaleTransactions = async (page, filterValue) => {\n  // ... (restul codului rămâne la fel)\n\n  const allTransactions = [];\n  for (let wallet of wallets) {\n    const {\n      address,\n      blockchain,\n      apiKey,\n      name\n    } = wallet;\n    const url = blockchain === \"ETH\" ? `https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=${page}&offset=100&sort=desc&apikey=${apiKey}` : `https://api.bscscan.com/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=${page}&offset=100&sort=desc&apikey=${apiKey}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      if (data.status === \"1\") {\n        // Filtrează tranzacțiile (converteste hexazecimal în număr)\n        const filteredTransactions = data.result.filter(tx => parseFloat(tx.value) > 10 ** 18 * filterValue // Filtrează tranzacții mai mari de filterValue ETH\n        );\n        const transactionsWithData = filteredTransactions.map(tx => {\n          let exchange = \"Unknown\";\n\n          // Verificăm 'from' și 'to' pentru a atribui exchange-ul\n          if (whaleWallets[tx.from]) {\n            exchange = whaleWallets[tx.from];\n          } else if (whaleWallets[tx.to]) {\n            exchange = whaleWallets[tx.to];\n          }\n          return {\n            hash: tx.hash,\n            from: tx.from,\n            to: tx.to,\n            value: tx.value / 10 ** 18,\n            blockchain,\n            exchange,\n            date: new Date(tx.timeStamp * 1000).toLocaleString(),\n            fee: tx.gasUsed ? tx.gasUsed * tx.gasPrice / 10 ** 18 : \"N/A\",\n            block: tx.blockNumber,\n            age: formatDistanceToNow(new Date(tx.timeStamp * 1000)),\n            icon: blockchain === \"ETH\" ? /*#__PURE__*/_jsxDEV(FaEthereum, {\n              className: \"text-cyan-400 text-xl\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(FaBitcoin, {\n              className: \"text-yellow-400 text-xl\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this),\n            timeStamp: tx.timeStamp // Adăugăm timeStamp pentru sortare\n          };\n        });\n        allTransactions.push(...transactionsWithData);\n      } else {\n        console.error(`No transactions found for wallet: ${name}`);\n      }\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n    }\n  }\n\n  // Sortează tranzacțiile după dată (timeStamp)\n  allTransactions.sort((a, b) => b.timeStamp - a.timeStamp);\n\n  // Calculează numărul total de pagini\n  const totalFilteredTransactions = allTransactions.length;\n  const totalPages = Math.ceil(totalFilteredTransactions / 10);\n\n  // Limitează tranzacțiile la 10 pe pagină\n  const startIndex = (page - 1) * 10;\n  const endIndex = startIndex + 10;\n  const paginatedTransactions = allTransactions.slice(startIndex, endIndex);\n  return {\n    transactions: paginatedTransactions,\n    totalPages\n  };\n};","map":{"version":3,"names":["fetchWhaleTransactions","page","filterValue","allTransactions","wallet","wallets","address","blockchain","apiKey","name","url","response","fetch","data","json","console","log","status","filteredTransactions","result","filter","tx","parseFloat","value","transactionsWithData","map","exchange","whaleWallets","from","to","hash","date","Date","timeStamp","toLocaleString","fee","gasUsed","gasPrice","block","blockNumber","age","formatDistanceToNow","icon","_jsxDEV","FaEthereum","className","fileName","_jsxFileName","lineNumber","columnNumber","FaBitcoin","push","error","sort","a","b","totalFilteredTransactions","length","totalPages","Math","ceil","startIndex","endIndex","paginatedTransactions","slice","transactions"],"sources":["D:/React App/crypto-news-sentiment/src/components/EthScan.js"],"sourcesContent":["export const fetchWhaleTransactions = async (page, filterValue) => {\r\n  // ... (restul codului rămâne la fel)\r\n\r\n  const allTransactions = [];\r\n\r\n  for (let wallet of wallets) {\r\n    const { address, blockchain, apiKey, name } = wallet;\r\n    const url =\r\n      blockchain === \"ETH\"\r\n        ? `https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=${page}&offset=100&sort=desc&apikey=${apiKey}`\r\n        : `https://api.bscscan.com/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=${page}&offset=100&sort=desc&apikey=${apiKey}`;\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      console.log(data);\r\n\r\n      if (data.status === \"1\") {\r\n        // Filtrează tranzacțiile (converteste hexazecimal în număr)\r\n        const filteredTransactions = data.result.filter(\r\n          (tx) => parseFloat(tx.value) > 10 ** 18 * filterValue // Filtrează tranzacții mai mari de filterValue ETH\r\n        );\r\n\r\n        const transactionsWithData = filteredTransactions.map((tx) => {\r\n          let exchange = \"Unknown\";\r\n\r\n          // Verificăm 'from' și 'to' pentru a atribui exchange-ul\r\n          if (whaleWallets[tx.from]) {\r\n            exchange = whaleWallets[tx.from];\r\n          } else if (whaleWallets[tx.to]) {\r\n            exchange = whaleWallets[tx.to];\r\n          }\r\n\r\n          return {\r\n            hash: tx.hash,\r\n            from: tx.from,\r\n            to: tx.to,\r\n            value: tx.value / 10 ** 18,\r\n            blockchain,\r\n            exchange,\r\n            date: new Date(tx.timeStamp * 1000).toLocaleString(),\r\n            fee: tx.gasUsed ? (tx.gasUsed * tx.gasPrice) / 10 ** 18 : \"N/A\",\r\n            block: tx.blockNumber,\r\n            age: formatDistanceToNow(new Date(tx.timeStamp * 1000)),\r\n            icon:\r\n              blockchain === \"ETH\" ? (\r\n                <FaEthereum className=\"text-cyan-400 text-xl\" />\r\n              ) : (\r\n                <FaBitcoin className=\"text-yellow-400 text-xl\" />\r\n              ),\r\n            timeStamp: tx.timeStamp, // Adăugăm timeStamp pentru sortare\r\n          };\r\n        });\r\n\r\n        allTransactions.push(...transactionsWithData);\r\n      } else {\r\n        console.error(`No transactions found for wallet: ${name}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching transactions:\", error);\r\n    }\r\n  }\r\n\r\n  // Sortează tranzacțiile după dată (timeStamp)\r\n  allTransactions.sort((a, b) => b.timeStamp - a.timeStamp);\r\n\r\n  // Calculează numărul total de pagini\r\n  const totalFilteredTransactions = allTransactions.length;\r\n  const totalPages = Math.ceil(totalFilteredTransactions / 10);\r\n\r\n  // Limitează tranzacțiile la 10 pe pagină\r\n  const startIndex = (page - 1) * 10;\r\n  const endIndex = startIndex + 10;\r\n  const paginatedTransactions = allTransactions.slice(startIndex, endIndex);\r\n\r\n  return { transactions: paginatedTransactions, totalPages };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}