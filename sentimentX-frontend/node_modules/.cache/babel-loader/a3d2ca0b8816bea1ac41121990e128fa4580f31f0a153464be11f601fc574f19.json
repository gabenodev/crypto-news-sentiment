{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\AltcoinSeason.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AltcoinSeason = () => {\n  _s();\n  const [isAltcoinSeason, setIsAltcoinSeason] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [outperformingCount, setOutperformingCount] = useState(0);\n  const [totalAltcoins, setTotalAltcoins] = useState(0);\n  const [percentage, setPercentage] = useState(0); // Procentajul actualizat\n  const [outperformingCoins, setOutperformingCoins] = useState([]); // Lista monedelor care au performat mai bine decât BTC\n\n  useEffect(() => {\n    const fetchAltcoinSeasonData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch primele 50 de criptomonede (exclude stablecoins și asset-backed tokens)\n        const response = await fetch(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=50&page=1\");\n        const data = await response.json();\n        console.log(\"API Data:\", data); // Verificăm datele returnate\n\n        // Lista de monede pe care le excludem (stablecoins și asset-backed tokens)\n        const excludedCoins = [\"tether\", \"usd-coin\", \"wrapped-bitcoin\", \"staked-ether\", \"binance-usd\", \"dai\", \"trueusd\"];\n\n        // Filtrăm monedele pentru a exclude stablecoins și asset-backed tokens\n        const filteredData = data.filter(coin => !excludedCoins.includes(coin.id));\n        console.log(\"Filtered Data:\", filteredData); // Verificăm datele filtrate\n\n        let outperformingCountTemp = 0;\n        const totalAltcoinsTemp = filteredData.length;\n        const outperformingCoinsTemp = []; // Lista monedelor care au depășit Bitcoin\n\n        // Verificăm performanța fiecărei monede față de Bitcoin pe ultimele 24 de ore\n        const bitcoin = data.find(coin => coin.id === \"bitcoin\");\n        if (!bitcoin) {\n          console.error(\"Bitcoin data not found\");\n          return;\n        }\n\n        // Verificăm dacă Bitcoin și monedele au date pentru schimbarea pe 24 de ore\n        for (let coin of filteredData) {\n          if (coin.price_change_percentage_24h && bitcoin.price_change_percentage_24h) {\n            console.log(`${coin.name}: ${coin.price_change_percentage_24h}% | Bitcoin: ${bitcoin.price_change_percentage_24h}%`); // Log pentru comparare\n            if (coin.price_change_percentage_24h > bitcoin.price_change_percentage_24h) {\n              outperformingCountTemp++;\n              outperformingCoinsTemp.push(coin.name); // Adăugăm numele monedei la lista celor care au outperformat Bitcoin\n            }\n          }\n        }\n        setOutperformingCount(outperformingCountTemp);\n        setTotalAltcoins(totalAltcoinsTemp);\n        setOutperformingCoins(outperformingCoinsTemp); // Setăm lista monedelor\n\n        // Calculăm procentajul de altcoins care au depășit Bitcoin\n        const percentageTemp = outperformingCountTemp / totalAltcoinsTemp * 100;\n        setPercentage(percentageTemp); // Actualizăm procentajul\n\n        // Dacă 75% din criptomonedele performează mai bine decât Bitcoin, considerăm că suntem în Altcoin Season\n        setIsAltcoinSeason(percentageTemp >= 75);\n      } catch (error) {\n        console.error(\"Error fetching altcoin season data:\", error);\n        setIsAltcoinSeason(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAltcoinSeasonData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Determinăm culoarea barei în funcție de procentaj\n  let barColor = \"#ff4444\"; // Default - roșu (nu suntem în Altcoin Season)\n\n  // Logica pentru culorile barei pe intervale\n  if (percentage >= 80) {\n    barColor = \"#16a34a\"; // Verde închis (80-100%)\n  } else if (percentage >= 60) {\n    barColor = \"#4ade80\"; // Verde deschis (60-80%)\n  } else if (percentage >= 40) {\n    barColor = \"#fcd34d\"; // Galben (40-60%)\n  } else if (percentage >= 20) {\n    barColor = \"#fb923c\"; // Portocaliu (20-40%)\n  } else {\n    barColor = \"#ff4444\"; // Roșu (0-20%)\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 rounded-lg bg-gray-200 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-2\",\n      children: isAltcoinSeason ? \"It's Altcoin Season (75% of the Top 50 coins are outperforming Bitcoin)\" : \"It's not Altcoin Season.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-300 h-4 rounded-full\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-4 rounded-full\",\n        style: {\n          width: `${percentage}%`,\n          // Folosim procentajul calculat\n          backgroundColor: barColor\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-lg\",\n      children: [outperformingCount, \" of \", totalAltcoins, \" altcoins have performed better than Bitcoin in the last 24 hours.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), outperformingCoins.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-semibold\",\n        children: \"Coins outperforming Bitcoin:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc pl-5 mt-2\",\n        children: outperformingCoins.map((coin, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"text-left\",\n          children: coin\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(AltcoinSeason, \"QH53e5DDPQJyfxW8/Bv0LV02L8c=\");\n_c = AltcoinSeason;\nexport default AltcoinSeason;\nvar _c;\n$RefreshReg$(_c, \"AltcoinSeason\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AltcoinSeason","_s","isAltcoinSeason","setIsAltcoinSeason","loading","setLoading","outperformingCount","setOutperformingCount","totalAltcoins","setTotalAltcoins","percentage","setPercentage","outperformingCoins","setOutperformingCoins","fetchAltcoinSeasonData","response","fetch","data","json","console","log","excludedCoins","filteredData","filter","coin","includes","id","outperformingCountTemp","totalAltcoinsTemp","length","outperformingCoinsTemp","bitcoin","find","error","price_change_percentage_24h","name","push","percentageTemp","children","fileName","_jsxFileName","lineNumber","columnNumber","barColor","className","style","width","backgroundColor","map","index","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/AltcoinSeason.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst AltcoinSeason = () => {\r\n  const [isAltcoinSeason, setIsAltcoinSeason] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [outperformingCount, setOutperformingCount] = useState(0);\r\n  const [totalAltcoins, setTotalAltcoins] = useState(0);\r\n  const [percentage, setPercentage] = useState(0); // Procentajul actualizat\r\n  const [outperformingCoins, setOutperformingCoins] = useState([]); // Lista monedelor care au performat mai bine decât BTC\r\n\r\n  useEffect(() => {\r\n    const fetchAltcoinSeasonData = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Fetch primele 50 de criptomonede (exclude stablecoins și asset-backed tokens)\r\n        const response = await fetch(\r\n          \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=50&page=1\"\r\n        );\r\n        const data = await response.json();\r\n\r\n        console.log(\"API Data:\", data); // Verificăm datele returnate\r\n\r\n        // Lista de monede pe care le excludem (stablecoins și asset-backed tokens)\r\n        const excludedCoins = [\r\n          \"tether\",\r\n          \"usd-coin\",\r\n          \"wrapped-bitcoin\",\r\n          \"staked-ether\",\r\n          \"binance-usd\",\r\n          \"dai\",\r\n          \"trueusd\",\r\n        ];\r\n\r\n        // Filtrăm monedele pentru a exclude stablecoins și asset-backed tokens\r\n        const filteredData = data.filter(\r\n          (coin) => !excludedCoins.includes(coin.id)\r\n        );\r\n\r\n        console.log(\"Filtered Data:\", filteredData); // Verificăm datele filtrate\r\n\r\n        let outperformingCountTemp = 0;\r\n        const totalAltcoinsTemp = filteredData.length;\r\n        const outperformingCoinsTemp = []; // Lista monedelor care au depășit Bitcoin\r\n\r\n        // Verificăm performanța fiecărei monede față de Bitcoin pe ultimele 24 de ore\r\n        const bitcoin = data.find((coin) => coin.id === \"bitcoin\");\r\n        if (!bitcoin) {\r\n          console.error(\"Bitcoin data not found\");\r\n          return;\r\n        }\r\n\r\n        // Verificăm dacă Bitcoin și monedele au date pentru schimbarea pe 24 de ore\r\n        for (let coin of filteredData) {\r\n          if (\r\n            coin.price_change_percentage_24h &&\r\n            bitcoin.price_change_percentage_24h\r\n          ) {\r\n            console.log(\r\n              `${coin.name}: ${coin.price_change_percentage_24h}% | Bitcoin: ${bitcoin.price_change_percentage_24h}%`\r\n            ); // Log pentru comparare\r\n            if (\r\n              coin.price_change_percentage_24h >\r\n              bitcoin.price_change_percentage_24h\r\n            ) {\r\n              outperformingCountTemp++;\r\n              outperformingCoinsTemp.push(coin.name); // Adăugăm numele monedei la lista celor care au outperformat Bitcoin\r\n            }\r\n          }\r\n        }\r\n\r\n        setOutperformingCount(outperformingCountTemp);\r\n        setTotalAltcoins(totalAltcoinsTemp);\r\n        setOutperformingCoins(outperformingCoinsTemp); // Setăm lista monedelor\r\n\r\n        // Calculăm procentajul de altcoins care au depășit Bitcoin\r\n        const percentageTemp =\r\n          (outperformingCountTemp / totalAltcoinsTemp) * 100;\r\n        setPercentage(percentageTemp); // Actualizăm procentajul\r\n\r\n        // Dacă 75% din criptomonedele performează mai bine decât Bitcoin, considerăm că suntem în Altcoin Season\r\n        setIsAltcoinSeason(percentageTemp >= 75);\r\n      } catch (error) {\r\n        console.error(\"Error fetching altcoin season data:\", error);\r\n        setIsAltcoinSeason(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAltcoinSeasonData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Determinăm culoarea barei în funcție de procentaj\r\n  let barColor = \"#ff4444\"; // Default - roșu (nu suntem în Altcoin Season)\r\n\r\n  // Logica pentru culorile barei pe intervale\r\n  if (percentage >= 80) {\r\n    barColor = \"#16a34a\"; // Verde închis (80-100%)\r\n  } else if (percentage >= 60) {\r\n    barColor = \"#4ade80\"; // Verde deschis (60-80%)\r\n  } else if (percentage >= 40) {\r\n    barColor = \"#fcd34d\"; // Galben (40-60%)\r\n  } else if (percentage >= 20) {\r\n    barColor = \"#fb923c\"; // Portocaliu (20-40%)\r\n  } else {\r\n    barColor = \"#ff4444\"; // Roșu (0-20%)\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-4 rounded-lg bg-gray-200 text-center\">\r\n      <h2 className=\"text-xl font-semibold mb-2\">\r\n        {isAltcoinSeason\r\n          ? \"It's Altcoin Season (75% of the Top 50 coins are outperforming Bitcoin)\"\r\n          : \"It's not Altcoin Season.\"}\r\n      </h2>\r\n\r\n      <div className=\"w-full bg-gray-300 h-4 rounded-full\">\r\n        <div\r\n          className=\"h-4 rounded-full\"\r\n          style={{\r\n            width: `${percentage}%`, // Folosim procentajul calculat\r\n            backgroundColor: barColor,\r\n          }}\r\n        ></div>\r\n      </div>\r\n\r\n      <p className=\"mt-2 text-lg\">\r\n        {outperformingCount} of {totalAltcoins} altcoins have performed better\r\n        than Bitcoin in the last 24 hours.\r\n      </p>\r\n\r\n      {/* Lista monedelor care au outperformat Bitcoin */}\r\n      {outperformingCoins.length > 0 && (\r\n        <div className=\"mt-4\">\r\n          <h3 className=\"font-semibold\">Coins outperforming Bitcoin:</h3>\r\n          <ul className=\"list-disc pl-5 mt-2\">\r\n            {outperformingCoins.map((coin, index) => (\r\n              <li key={index} className=\"text-left\">\r\n                {coin}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AltcoinSeason;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}