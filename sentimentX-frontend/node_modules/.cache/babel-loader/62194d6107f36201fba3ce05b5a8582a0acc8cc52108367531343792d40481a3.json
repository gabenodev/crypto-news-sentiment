{"ast":null,"code":"var _jsxFileName = \"D:\\\\React App\\\\crypto-news-sentiment\\\\src\\\\components\\\\AltcoinSeason.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AltcoinSeason = () => {\n  _s();\n  const [ethOutperformingBTC, setEthOutperformingBTC] = useState(null);\n  const [btcDominance, setBtcDominance] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Funcția pentru a verifica performanța Ethereum față de Bitcoin și BTC dominance\n    const fetchAltcoinSeason = async () => {\n      try {\n        setLoading(true);\n        // Fetch datele pentru Ethereum și Bitcoin\n        const response = await fetch(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum\");\n        const data = await response.json();\n\n        // Găsește Ethereum și Bitcoin\n        const ethereum = data.find(coin => coin.id === \"ethereum\");\n        const bitcoin = data.find(coin => coin.id === \"bitcoin\");\n\n        // Verifică performanța Ethereum față de Bitcoin (în ultimele 30 de zile)\n        const ethOutperformance = ethereum.price_change_percentage_30d > bitcoin.price_change_percentage_30d;\n\n        // Fetch pentru BTC dominance\n        const dominanceResponse = await fetch(\"https://api.coingecko.com/api/v3/global\");\n        const dominanceData = await dominanceResponse.json();\n        const btcDominanceValue = dominanceData.data.market_cap_percentage.btc;\n        setEthOutperformingBTC(ethOutperformance);\n        setBtcDominance(btcDominanceValue);\n      } catch (error) {\n        console.error(\"Error fetching altcoin season data:\", error);\n        setEthOutperformingBTC(false);\n        setBtcDominance(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAltcoinSeason();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Determină dacă scăderea BTC dominance este un semn de altcoin season\n  const isAltcoinSeason = ethOutperformingBTC && btcDominance < 50; // Ethereum a performat mai bine și BTC dominance e sub 50%\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 rounded-lg bg-gray-200 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-2\",\n      children: isAltcoinSeason ? \"It's Altcoin Season (Ethereum outperforming BTC and BTC dominance dropping)\" : \"It's not Altcoin Season.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-300 h-4 rounded-full\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-4 rounded-full\",\n        style: {\n          width: `${isAltcoinSeason ? 100 : 0}%`,\n          backgroundColor: isAltcoinSeason ? \"#23d996\" : \"#ff4444\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-lg\",\n      children: [\"Ethereum performance:\", \" \", ethOutperformingBTC ? \"Outperformed BTC\" : \"Underperformed BTC\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), \"BTC Dominance: \", btcDominance, \"% (Sub 50% = Altcoin Season)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(AltcoinSeason, \"wisuDCmCC0U/qT6Jhum9Q/TUmmo=\");\n_c = AltcoinSeason;\nexport default AltcoinSeason;\nvar _c;\n$RefreshReg$(_c, \"AltcoinSeason\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AltcoinSeason","_s","ethOutperformingBTC","setEthOutperformingBTC","btcDominance","setBtcDominance","loading","setLoading","fetchAltcoinSeason","response","fetch","data","json","ethereum","find","coin","id","bitcoin","ethOutperformance","price_change_percentage_30d","dominanceResponse","dominanceData","btcDominanceValue","market_cap_percentage","btc","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","isAltcoinSeason","className","style","width","backgroundColor","_c","$RefreshReg$"],"sources":["D:/React App/crypto-news-sentiment/src/components/AltcoinSeason.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst AltcoinSeason = () => {\r\n  const [ethOutperformingBTC, setEthOutperformingBTC] = useState(null);\r\n  const [btcDominance, setBtcDominance] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Funcția pentru a verifica performanța Ethereum față de Bitcoin și BTC dominance\r\n    const fetchAltcoinSeason = async () => {\r\n      try {\r\n        setLoading(true);\r\n        // Fetch datele pentru Ethereum și Bitcoin\r\n        const response = await fetch(\r\n          \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum\"\r\n        );\r\n        const data = await response.json();\r\n\r\n        // Găsește Ethereum și Bitcoin\r\n        const ethereum = data.find((coin) => coin.id === \"ethereum\");\r\n        const bitcoin = data.find((coin) => coin.id === \"bitcoin\");\r\n\r\n        // Verifică performanța Ethereum față de Bitcoin (în ultimele 30 de zile)\r\n        const ethOutperformance =\r\n          ethereum.price_change_percentage_30d >\r\n          bitcoin.price_change_percentage_30d;\r\n\r\n        // Fetch pentru BTC dominance\r\n        const dominanceResponse = await fetch(\r\n          \"https://api.coingecko.com/api/v3/global\"\r\n        );\r\n        const dominanceData = await dominanceResponse.json();\r\n        const btcDominanceValue = dominanceData.data.market_cap_percentage.btc;\r\n\r\n        setEthOutperformingBTC(ethOutperformance);\r\n        setBtcDominance(btcDominanceValue);\r\n      } catch (error) {\r\n        console.error(\"Error fetching altcoin season data:\", error);\r\n        setEthOutperformingBTC(false);\r\n        setBtcDominance(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAltcoinSeason();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Determină dacă scăderea BTC dominance este un semn de altcoin season\r\n  const isAltcoinSeason = ethOutperformingBTC && btcDominance < 50; // Ethereum a performat mai bine și BTC dominance e sub 50%\r\n\r\n  return (\r\n    <div className=\"p-4 rounded-lg bg-gray-200 text-center\">\r\n      <h2 className=\"text-xl font-semibold mb-2\">\r\n        {isAltcoinSeason\r\n          ? \"It's Altcoin Season (Ethereum outperforming BTC and BTC dominance dropping)\"\r\n          : \"It's not Altcoin Season.\"}\r\n      </h2>\r\n\r\n      <div className=\"w-full bg-gray-300 h-4 rounded-full\">\r\n        <div\r\n          className=\"h-4 rounded-full\"\r\n          style={{\r\n            width: `${isAltcoinSeason ? 100 : 0}%`,\r\n            backgroundColor: isAltcoinSeason ? \"#23d996\" : \"#ff4444\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n\r\n      <p className=\"mt-2 text-lg\">\r\n        Ethereum performance:{\" \"}\r\n        {ethOutperformingBTC ? \"Outperformed BTC\" : \"Underperformed BTC\"}\r\n        <br />\r\n        BTC Dominance: {btcDominance}% (Sub 50% = Altcoin Season)\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AltcoinSeason;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}